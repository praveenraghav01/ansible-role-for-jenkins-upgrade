---

- name: Download Jenkins CLI jar file
  get_url:
    url: http://localhost:8080/jnlpJars/jenkins-cli.jar
    dest: /tmp/jenkins-cli.jar

- name: Get AWS Region
  shell: curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq .region -r
  register: region
  # set_fact: 
  #   region: "{{ region.stdout }}"

- name: Get Jenkins Password
  shell: aws ssm get-parameters --name {{ jenkins_ssm_prefix }}/JenkinsAdminPassword --with-decryption --output text --region {{ region.stdout }} | cut -f 6
  register: password
  # set_fact:
  #   password: "{{ password.stdout }}"

- name: Put Jenkins into safe shutdown
  shell: java -jar /tmp/jenkins-cli.jar -s http://localhost:8080 -auth {{ jenkins_user_name }}:{{ password.stdout }} safe-shutdow
 
- name: Wait untils Jenkins web API is available
  shell: curl --head --silent http://localhost:8080/cli/ --user {{ jenkins_user_name }}:{{ password.stdout }}
  register: result
  until: result.stdout.find("200 OK") == -1
  retries: 12
  delay: 5

- name: Delete old Jenkins war file
  file:
    path: /tmp/jenkins.war
    state: absent
  when: jenkins_version is defined

- name: Download Jenkins latest war apiVersion if specific version is not provided
  get_url:
    url: "{{ jenkins_pkg_url }}/latest/jenkins.war"
    dest: /tmp/jenkins.war
  when: jenkins_version is not defined

- name: Download Jenkins war apiVersion
  get_url:
    url: "{{ jenkins_pkg_url }}/download/war/{{ jenkins_version }}/jenkins.war"
    dest: /tmp/jenkins.war
  when: jenkins_version is defined

- name: Copy old war file to /tmp folder
  shell: yes | cp /usr/lib/jenkins/jenkins.war /tmp/jenkins.war.previous.version

- name: Copy the newly downloaded war file to the /usr/lib/jenkins directory
  shell: yes | cp /tmp/jenkins.war /usr/lib/jenkins/ 

- name: Stop the Jenkins service
  service:
    name: jenkins
    state: stopped

- name: Start the Jenkins service
  service:
    name: jenkins
    enabled: yes
    state: started
